-- 로깅 시스템 데이터베이스 스키마 생성 SQL 스크립트
-- Firebird 5.0 환경에서 실행

-- 1. 메타 테이블 생성 (기존 유지)
CREATE TABLE LOG_META (
    TABLE_NAME      VARCHAR(50) NOT NULL PRIMARY KEY,
    YEAR_MONTH      VARCHAR(6) NOT NULL,
    CREATION_DATE   TIMESTAMP NOT NULL,
    LAST_UPDATE     TIMESTAMP NOT NULL,
    RECORD_COUNT    INTEGER DEFAULT 0
);

COMMENT ON TABLE LOG_META IS '로그 테이블 메타 정보';
COMMENT ON COLUMN LOG_META.TABLE_NAME IS '테이블 이름';
COMMENT ON COLUMN LOG_META.YEAR_MONTH IS '년월 (YYYYMM 형식)';
COMMENT ON COLUMN LOG_META.CREATION_DATE IS '생성 일자';
COMMENT ON COLUMN LOG_META.LAST_UPDATE IS '마지막 업데이트 일자';
COMMENT ON COLUMN LOG_META.RECORD_COUNT IS '대략적인 레코드 수';

-- 2. 확장 데이터 테이블 생성 (신규)
CREATE TABLE LOG_EXT_DATA (
    EXT_DATA_ID     BIGINT NOT NULL PRIMARY KEY,
    HANDLER_TYPE    VARCHAR(50) NOT NULL,
    HOST_NAME       VARCHAR(100),
    IP_ADDRESS      VARCHAR(50),
    APP_NAME        VARCHAR(100),
    APP_VERSION     VARCHAR(50),
    USER_NAME       VARCHAR(100),
    PROCESS_ID      INTEGER,
    INSTANCE_ID     VARCHAR(100),
    EXTRA_DATA      BLOB SUB_TYPE JSON
);

CREATE INDEX IDX_LOG_EXT_DATA_HANDLER ON LOG_EXT_DATA (HANDLER_TYPE);
CREATE INDEX IDX_LOG_EXT_DATA_HOST ON LOG_EXT_DATA (HOST_NAME);
CREATE INDEX IDX_LOG_EXT_DATA_IP ON LOG_EXT_DATA (IP_ADDRESS);
CREATE INDEX IDX_LOG_EXT_DATA_APP ON LOG_EXT_DATA (APP_NAME);

COMMENT ON TABLE LOG_EXT_DATA IS '로그 확장 데이터';
COMMENT ON COLUMN LOG_EXT_DATA.EXT_DATA_ID IS '확장 데이터 ID';
COMMENT ON COLUMN LOG_EXT_DATA.HANDLER_TYPE IS '핸들러 유형';
COMMENT ON COLUMN LOG_EXT_DATA.HOST_NAME IS '호스트명';
COMMENT ON COLUMN LOG_EXT_DATA.IP_ADDRESS IS 'IP 주소';
COMMENT ON COLUMN LOG_EXT_DATA.APP_NAME IS '애플리케이션 이름';
COMMENT ON COLUMN LOG_EXT_DATA.APP_VERSION IS '애플리케이션 버전';
COMMENT ON COLUMN LOG_EXT_DATA.USER_NAME IS '사용자 이름';
COMMENT ON COLUMN LOG_EXT_DATA.PROCESS_ID IS '프로세스 ID';
COMMENT ON COLUMN LOG_EXT_DATA.INSTANCE_ID IS '인스턴스 ID';
COMMENT ON COLUMN LOG_EXT_DATA.EXTRA_DATA IS '추가 데이터 (JSON)';

-- 3. 월별 로그 테이블 생성 (수정: EXT_DATA_ID 필드 추가)
-- 참고: 실제 사용 시 LOGS_YYYYMM 형식으로 테이블 이름 변경 필요 (예: LOGS_202504)
CREATE TABLE LOGS_TEMPLATE (
    LOG_ID          BIGINT NOT NULL PRIMARY KEY,
    TIMESTAMP       TIMESTAMP NOT NULL,
    LEVEL           VARCHAR(10) NOT NULL,
    MESSAGE         VARCHAR(4000) NOT NULL,
    TAG             VARCHAR(100),
    SOURCE_ID       VARCHAR(100),
    HANDLER_TYPE    VARCHAR(50),
    EXT_DATA_ID     BIGINT  -- 신규: 확장 데이터 ID 필드
);

CREATE INDEX IDX_LOGS_TEMPLATE_TIMESTAMP ON LOGS_TEMPLATE (TIMESTAMP);
CREATE INDEX IDX_LOGS_TEMPLATE_LEVEL ON LOGS_TEMPLATE (LEVEL);
CREATE INDEX IDX_LOGS_TEMPLATE_TAG ON LOGS_TEMPLATE (TAG);
CREATE INDEX IDX_LOGS_TEMPLATE_SOURCE_ID ON LOGS_TEMPLATE (SOURCE_ID);
CREATE INDEX IDX_LOGS_TEMPLATE_EXT_DATA_ID ON LOGS_TEMPLATE (EXT_DATA_ID);

COMMENT ON TABLE LOGS_TEMPLATE IS '로그 템플릿 테이블';
COMMENT ON COLUMN LOGS_TEMPLATE.LOG_ID IS '로그 ID';
COMMENT ON COLUMN LOGS_TEMPLATE.TIMESTAMP IS '타임스탬프';
COMMENT ON COLUMN LOGS_TEMPLATE.LEVEL IS '로그 레벨';
COMMENT ON COLUMN LOGS_TEMPLATE.MESSAGE IS '로그 메시지';
COMMENT ON COLUMN LOGS_TEMPLATE.TAG IS '태그';
COMMENT ON COLUMN LOGS_TEMPLATE.SOURCE_ID IS '소스 식별자';
COMMENT ON COLUMN LOGS_TEMPLATE.HANDLER_TYPE IS '핸들러 유형';
COMMENT ON COLUMN LOGS_TEMPLATE.EXT_DATA_ID IS '확장 데이터 ID';

-- 4. 현재 월 테이블 생성 예시 (2025년 4월)
CREATE TABLE LOGS_202504 (
    LOG_ID          BIGINT NOT NULL PRIMARY KEY,
    TIMESTAMP       TIMESTAMP NOT NULL,
    LEVEL           VARCHAR(10) NOT NULL,
    MESSAGE         VARCHAR(4000) NOT NULL,
    TAG             VARCHAR(100),
    SOURCE_ID       VARCHAR(100),
    HANDLER_TYPE    VARCHAR(50),
    EXT_DATA_ID     BIGINT
);

CREATE INDEX IDX_LOGS_202504_TIMESTAMP ON LOGS_202504 (TIMESTAMP);
CREATE INDEX IDX_LOGS_202504_LEVEL ON LOGS_202504 (LEVEL);
CREATE INDEX IDX_LOGS_202504_TAG ON LOGS_202504 (TAG);
CREATE INDEX IDX_LOGS_202504_SOURCE_ID ON LOGS_202504 (SOURCE_ID);
CREATE INDEX IDX_LOGS_202504_EXT_DATA_ID ON LOGS_202504 (EXT_DATA_ID);

COMMENT ON TABLE LOGS_202504 IS '2025년 4월 로그';

-- 5. 메타 테이블에 현재 월 테이블 정보 추가
INSERT INTO LOG_META (TABLE_NAME, YEAR_MONTH, CREATION_DATE, LAST_UPDATE, RECORD_COUNT)
VALUES ('LOGS_202504', '202504', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);

-- 6. 테스트 데이터 삽입 예시

-- 확장 데이터 삽입
INSERT INTO LOG_EXT_DATA (EXT_DATA_ID, HANDLER_TYPE, HOST_NAME, IP_ADDRESS, APP_NAME, APP_VERSION, USER_NAME, PROCESS_ID, INSTANCE_ID, EXTRA_DATA)
VALUES (1, 'SourceIdentifier', 'DESKTOP-SLA3VDK', '192.168.1.100', 'GlobalLogger_test.exe', '1.0.0', 'TestUser', 1234, 'INSTANCE-001', '{}');

-- 로그 데이터 삽입
INSERT INTO LOGS_202504 (LOG_ID, TIMESTAMP, LEVEL, MESSAGE, TAG, SOURCE_ID, HANDLER_TYPE, EXT_DATA_ID)
VALUES (1, CURRENT_TIMESTAMP, 'INFO', '애플리케이션 시작...', 'File', 'File', 'SourceIdentifier', 1);

-- 7. JSON 데이터 예시
-- 네트워크 핸들러 확장 데이터
INSERT INTO LOG_EXT_DATA (EXT_DATA_ID, HANDLER_TYPE, EXTRA_DATA)
VALUES (2, 'NetworkHandler', 
'{
  "network": {
    "session_id": "SESSION-123456",
    "client_port": 12345,
    "protocol": "TCP"
  }
}');

-- 이메일 핸들러 확장 데이터
INSERT INTO LOG_EXT_DATA (EXT_DATA_ID, HANDLER_TYPE, EXTRA_DATA)
VALUES (3, 'EmailHandler', 
'{
  "email": {
    "recipients": ["user1@example.com", "user2@example.com"],
    "subject": "System Alert",
    "attachments": 2
  }
}');

-- 8. JSON 쿼리 예시

-- JSON 값으로 필터링
SELECT l.LOG_ID, l.TIMESTAMP, l.LEVEL, l.MESSAGE, e.EXTRA_DATA
FROM LOGS_202504 l
JOIN LOG_EXT_DATA e ON l.EXT_DATA_ID = e.EXT_DATA_ID
WHERE JSON_VALUE(e.EXTRA_DATA, '$.network.protocol') = 'TCP';

-- JSON 경로 존재 여부로 필터링
SELECT l.LOG_ID, l.TIMESTAMP, l.LEVEL, l.MESSAGE, e.EXTRA_DATA
FROM LOGS_202504 l
JOIN LOG_EXT_DATA e ON l.EXT_DATA_ID = e.EXT_DATA_ID
WHERE JSON_EXISTS(e.EXTRA_DATA, '$.email.recipients');

-- JSON 배열 요소 검색
SELECT l.LOG_ID, l.TIMESTAMP, l.LEVEL, l.MESSAGE, e.EXTRA_DATA
FROM LOGS_202504 l
JOIN LOG_EXT_DATA e ON l.EXT_DATA_ID = e.EXT_DATA_ID
WHERE JSON_EXISTS(e.EXTRA_DATA, '$.email.recipients[*]?(@=="user1@example.com")');
